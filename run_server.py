#!/usr/bin/env python
"""
Script de lancement rapide pour EduManager
Ce script automatise les √©tapes de configuration et de lancement du serveur
"""

import os
import sys
import subprocess
import platform

def run_command(command, description=""):
    """Ex√©cuter une commande et afficher le r√©sultat"""
    if description:
        print(f"\nüîÑ {description}...")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        if result.stdout:
            print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description}")
        print(f"Erreur: {e.stderr}")
        return False

def check_python_version():
    """V√©rifier la version de Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        print(f"Version actuelle: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    return True

def check_virtual_env():
    """V√©rifier si un environnement virtuel est activ√©"""
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Environnement virtuel d√©tect√©")
        return True
    else:
        print("‚ö†Ô∏è  Aucun environnement virtuel d√©tect√©")
        print("Il est recommand√© d'utiliser un environnement virtuel")
        return False

def install_dependencies():
    """Installer les d√©pendances"""
    if not os.path.exists('requirements.txt'):
        print("‚ùå Fichier requirements.txt non trouv√©")
        return False
    
    return run_command("pip install -r requirements.txt", "Installation des d√©pendances")

def setup_database():
    """Configurer la base de donn√©es"""
    print("\nüìä Configuration de la base de donn√©es...")
    
    # Cr√©er les migrations
    if not run_command("python manage.py makemigrations", "Cr√©ation des migrations"):
        return False
    
    # Appliquer les migrations
    if not run_command("python manage.py migrate", "Application des migrations"):
        return False
    
    return True

def create_superuser():
    """Cr√©er un superutilisateur si n√©cessaire"""
    print("\nüë§ V√©rification du superutilisateur...")
    
    # V√©rifier si un superutilisateur existe d√©j√†
    check_command = 'python manage.py shell -c "from django.contrib.auth.models import User; print(User.objects.filter(is_superuser=True).exists())"'
    
    try:
        result = subprocess.run(check_command, shell=True, capture_output=True, text=True)
        if "True" in result.stdout:
            print("‚úÖ Superutilisateur existant trouv√©")
            return True
    except:
        pass
    
    print("‚ÑπÔ∏è  Aucun superutilisateur trouv√©. Cr√©ation d'un compte admin par d√©faut...")
    
    # Cr√©er un superutilisateur par d√©faut
    create_command = """
python manage.py shell -c "
from django.contrib.auth.models import User;
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@edumanager.com', 'admin123');
    print('Superutilisateur cr√©√©: admin / admin123')
else:
    print('Utilisateur admin existe d√©j√†')
"
"""
    
    return run_command(create_command, "Cr√©ation du superutilisateur")

def create_sample_data():
    """Cr√©er des donn√©es d'exemple"""
    print("\nüìù Voulez-vous cr√©er des donn√©es d'exemple ? (y/N): ", end="")
    choice = input().lower()
    
    if choice in ['y', 'yes', 'o', 'oui']:
        return run_command("python manage.py create_sample_data", "Cr√©ation des donn√©es d'exemple")
    
    return True

def collect_static():
    """Collecter les fichiers statiques"""
    return run_command("python manage.py collectstatic --noinput", "Collecte des fichiers statiques")

def start_server():
    """D√©marrer le serveur de d√©veloppement"""
    print("\nüöÄ D√©marrage du serveur de d√©veloppement...")
    print("üìç Le serveur sera accessible √†: http://127.0.0.1:8000/")
    print("üõë Appuyez sur Ctrl+C pour arr√™ter le serveur")
    print("\n" + "="*50)
    
    try:
        subprocess.run("python manage.py runserver", shell=True, check=True)
    except KeyboardInterrupt:
        print("\n\nüõë Serveur arr√™t√© par l'utilisateur")
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors du d√©marrage du serveur: {e}")

def main():
    """Fonction principale"""
    print("üéì EduManager - Script de lancement automatique")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    check_virtual_env()
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not os.path.exists('manage.py'):
        print("‚ùå Fichier manage.py non trouv√©")
        print("Assurez-vous d'√™tre dans le r√©pertoire racine du projet")
        sys.exit(1)
    
    # Installation et configuration
    steps = [
        ("Installation des d√©pendances", install_dependencies),
        ("Configuration de la base de donn√©es", setup_database),
        ("Cr√©ation du superutilisateur", create_superuser),
        ("Collecte des fichiers statiques", collect_static),
        ("Cr√©ation des donn√©es d'exemple", create_sample_data),
    ]
    
    for description, func in steps:
        if not func():
            print(f"\n‚ùå √âchec lors de: {description}")
            print("Veuillez corriger les erreurs et relancer le script")
            sys.exit(1)
    
    print("\n‚úÖ Configuration termin√©e avec succ√®s!")
    print("\nüìã Informations de connexion:")
    print("   - URL: http://127.0.0.1:8000/")
    print("   - Admin: admin / admin123")
    print("   - Interface admin: http://127.0.0.1:8000/admin/")
    
    # D√©marrer le serveur
    print("\nüöÄ Pr√™t √† d√©marrer le serveur!")
    print("Appuyez sur Entr√©e pour continuer ou Ctrl+C pour quitter: ", end="")
    
    try:
        input()
        start_server()
    except KeyboardInterrupt:
        print("\nüëã Au revoir!")

if __name__ == "__main__":
    main()
